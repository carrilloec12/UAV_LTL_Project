INFO:polytope.polytope:will use `cvxopt.glpk` solver
INFO:omega.symbolic.bdd.slugs_logger:lex: tokens   = ['NOT', 'AND', 'OR', 'XOR', 'DOLLAR', 'QUESTION', 'FORALL', 'EXISTS', 'RENAME', 'DIV', 'NAME', 'NUMBER']
INFO:omega.symbolic.bdd.slugs_logger:lex: literals = ''
INFO:omega.symbolic.bdd.slugs_logger:lex: states   = {'INITIAL': 'inclusive'}
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_NAME -> '[A-Za-z_][A-Za-z0-9_']*' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_NUMBER -> '[-]*\d+' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_FORALL -> '\\A' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_EXISTS -> '\\E' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_RENAME -> '\\S' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_DOLLAR -> '\$' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_NOT -> '\!' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_QUESTION -> '\?' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_AND -> '\&' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_OR -> '\|' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_XOR -> '\^' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_DIV -> '/' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: ==== MASTER REGEXS FOLLOW ====
INFO:omega.symbolic.bdd.slugs_logger:lex: state 'INITIAL' : regex[0] = '(?P<t_NAME>[A-Za-z_][A-Za-z0-9_']*)|(?P<t_NUMBER>[-]*\d+)|(?P<t_FORALL>\\A)|(?P<t_EXISTS>\\E)|(?P<t_RENAME>\\S)|(?P<t_DOLLAR>\$)|(?P<t_NOT>\!)|(?P<t_QUESTION>\?)|(?P<t_AND>\&)|(?P<t_OR>\|)|(?P<t_XOR>\^)|(?P<t_DIV>/)'
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X0 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X0 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X2 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X2 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X6 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X6 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X8 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X8 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X0
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X0
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['home'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['home'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X8
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X8
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['goal'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['goal'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X2
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X2
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX2'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX2'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X4
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X4
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX4'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX4'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X6
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X6
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX6'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX6'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X0 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X0 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X2 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X2 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X6 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X6 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X8 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X8 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X8
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X8
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['home'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['home'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X0
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X0
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['goal'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['goal'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X2
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X2
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX2'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX2'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X4
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X4
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX4'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX4'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X6
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X6
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX6'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX6'])})
type definitions: {'ap': PowerSet(MathSet(['home', 'goal', 'obsX2', 'obsX6', 'obsX4']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X2
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X2
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obs2'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obs2'])})
type definitions: {'ap': PowerSet(MathSet(['obs6', 'obs4', 'obs2']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X4
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X4
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obs4'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obs4'])})
type definitions: {'ap': PowerSet(MathSet(['obs6', 'obs4', 'obs2']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X6
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X6
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obs6'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obs6'])})
type definitions: {'ap': PowerSet(MathSet(['obs6', 'obs4', 'obs2']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X2 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X6 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:__main__:----------------------------------------
Finite Transition System (open): 
----------------------------------------
Atomic Propositions (APs):
MathSet(['obs6', 'obs4', 'obs2'])

States labeled with sets of APs:
	 State: X2, AP: set(['obs2'])
	 State: X6, AP: set(['obs6'])
	 State: X4, AP: set(['obs4'])


Initial States:
SubSet(['X2'])

System Action Type: sys_actions, with possible values: MathSet([])
MathSet([])

Environment Action Type: env_actions, with possible values:
	MathSet([])
MathSet([])

Transitions labeled with sys and env actions:
[('X2', 'X4', {  }), ('X6', 'X4', {  }), ('X4', 'X2', {  }), ('X4', 'X6', {  })]
----------------------------------------

INFO:tulip.synth:sys.state_varname undefined. Will use the default variable name: "loc".
DEBUG:tulip.synth:action_type:
	sys_actions
with codomain:
	MathSet([])
DEBUG:tulip.synth:Found sys action
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:Updating sys_action_ids with:
	{}
DEBUG:tulip.synth:action_type:
	env_actions
with codomain:
	MathSet([])
DEBUG:tulip.synth:Found env action
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:Updating env_action_ids with:
	{}
DEBUG:tulip.synth:mapping domain: States:
['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']
	to expression understood by a GR(1) solver.
DEBUG:tulip.synth:options for modeling actions:
	mutex: True
	min_one: True
DEBUG:tulip.synth:states not modeled as Booleans
DEBUG:tulip.synth:all states are strings
DEBUG:tulip.synth:for tulip variable: loc
the map from [tulip action values] ---> [solver expressions] is:
		{'X8': 'loc = "X8"', 'X2': 'loc = "X2"', 'X3': 'loc = "X3"', 'X0': 'loc = "X0"', 'X1': 'loc = "X1"', 'X6': 'loc = "X6"', 'X7': 'loc = "X7"', 'X4': 'loc = "X4"', 'X5': 'loc = "X5"'}
DEBUG:tulip.synth:modeling sys transitions in logic
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X8, the available transitions are:
	[('X8', 'X7', {}), ('X8', 'X5', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X7, with state_id: loc = "X7", has post-conditions: ['X(loc = "X7")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X5, with state_id: loc = "X5", has post-conditions: ['X(loc = "X5")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X2, the available transitions are:
	[('X2', 'X1', {}), ('X2', 'X5', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X1, with state_id: loc = "X1", has post-conditions: ['X(loc = "X1")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X5, with state_id: loc = "X5", has post-conditions: ['X(loc = "X5")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X3, the available transitions are:
	[('X3', 'X0', {}), ('X3', 'X6', {}), ('X3', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X0, with state_id: loc = "X0", has post-conditions: ['X(loc = "X0")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X6, with state_id: loc = "X6", has post-conditions: ['X(loc = "X6")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X0, the available transitions are:
	[('X0', 'X3', {}), ('X0', 'X1', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X3, with state_id: loc = "X3", has post-conditions: ['X(loc = "X3")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X1, with state_id: loc = "X1", has post-conditions: ['X(loc = "X1")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X1, the available transitions are:
	[('X1', 'X2', {}), ('X1', 'X0', {}), ('X1', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X2, with state_id: loc = "X2", has post-conditions: ['X(loc = "X2")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X0, with state_id: loc = "X0", has post-conditions: ['X(loc = "X0")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X6, the available transitions are:
	[('X6', 'X3', {}), ('X6', 'X7', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X3, with state_id: loc = "X3", has post-conditions: ['X(loc = "X3")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X7, with state_id: loc = "X7", has post-conditions: ['X(loc = "X7")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X7, the available transitions are:
	[('X7', 'X8', {}), ('X7', 'X6', {}), ('X7', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X8, with state_id: loc = "X8", has post-conditions: ['X(loc = "X8")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X6, with state_id: loc = "X6", has post-conditions: ['X(loc = "X6")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X4, the available transitions are:
	[('X4', 'X3', {}), ('X4', 'X1', {}), ('X4', 'X7', {}), ('X4', 'X5', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X3, with state_id: loc = "X3", has post-conditions: ['X(loc = "X3")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X1, with state_id: loc = "X1", has post-conditions: ['X(loc = "X1")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X7, with state_id: loc = "X7", has post-conditions: ['X(loc = "X7")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X5, with state_id: loc = "X5", has post-conditions: ['X(loc = "X5")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X5, the available transitions are:
	[('X5', 'X2', {}), ('X5', 'X8', {}), ('X5', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X2, with state_id: loc = "X2", has post-conditions: ['X(loc = "X2")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X8, with state_id: loc = "X8", has post-conditions: ['X(loc = "X8")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.synth:sys TS:
ENVIRONMENT VARIABLES:
	(none)

SYSTEM VARIABLES:
	loc	['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']
	goal	boolean
	obsX2	boolean
	obsX6	boolean
	obsX4	boolean
	home	boolean

FORMULA:
ASSUMPTION:
GUARANTEE:
    INITIAL
	  ((loc = "X0"))
	& (!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4))
	& (!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4))
	& (!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6))
	& (!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
    SAFETY
	  []((loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))))
	& []((loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))))
	& []((loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))))
	& []((loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))))
	& []((loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))))
	& [](X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4)))
	& [](X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4)))
	& [](X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6)))
	& [](X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))

------------------------------------------------------------
INFO:tulip.synth:env.state_varname undefined. Will use the default variable name: "eloc".
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:mapping domain: States:
['X2', 'X6', 'X4']
	to expression understood by a GR(1) solver.
DEBUG:tulip.synth:options for modeling actions:
	mutex: True
	min_one: True
DEBUG:tulip.synth:states not modeled as Booleans
DEBUG:tulip.synth:all states are strings
DEBUG:tulip.synth:for tulip variable: eloc
the map from [tulip action values] ---> [solver expressions] is:
		{'X2': 'eloc = "X2"', 'X6': 'eloc = "X6"', 'X4': 'eloc = "X4"'}
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:env TS:
ENVIRONMENT VARIABLES:
	obs6	boolean
	obs4	boolean
	obs2	boolean
	eloc	['X2', 'X6', 'X4']

SYSTEM VARIABLES:
	(none)

FORMULA:
ASSUMPTION:
    INITIAL
	  ((eloc = "X2"))
	& (!((eloc = "X2")) || (obs2 && !obs6 && !obs4))
	& (!((eloc = "X6")) || (obs6 && !obs4 && !obs2))
	& (!((eloc = "X4")) || (obs4 && !obs6 && !obs2))
    SAFETY
	  [](((eloc = "X2")) -> (((X(eloc = "X4")))))
	& [](((eloc = "X6")) -> (((X(eloc = "X4")))))
	& [](((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6")))))
	& [](X((eloc = "X2") -> (obs2 && !obs6 && !obs4)))
	& [](X((eloc = "X6") -> (obs6 && !obs4 && !obs2)))
	& [](X((eloc = "X4") -> (obs4 && !obs6 && !obs2)))
GUARANTEE:

------------------------------------------------------------
INFO:tulip.synth:Overall Spec:
ENVIRONMENT VARIABLES:
	obs6	boolean
	obs4	boolean
	obs2	boolean
	eloc	['X2', 'X6', 'X4']

SYSTEM VARIABLES:
	loc	['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']
	goal	boolean
	obsX2	boolean
	obsX6	boolean
	obsX4	boolean
	home	boolean

FORMULA:
ASSUMPTION:
    INITIAL
	  ((eloc = "X2"))
	& (!((eloc = "X2")) || (obs2 && !obs6 && !obs4))
	& (!((eloc = "X6")) || (obs6 && !obs4 && !obs2))
	& (!((eloc = "X4")) || (obs4 && !obs6 && !obs2))
    SAFETY
	  [](((eloc = "X2")) -> (((X(eloc = "X4")))))
	& [](((eloc = "X6")) -> (((X(eloc = "X4")))))
	& [](((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6")))))
	& [](X((eloc = "X2") -> (obs2 && !obs6 && !obs4)))
	& [](X((eloc = "X6") -> (obs6 && !obs4 && !obs2)))
	& [](X((eloc = "X4") -> (obs4 && !obs6 && !obs2)))
GUARANTEE:
    INITIAL
	  (home)
	& ((loc = "X0"))
	& (!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4))
	& (!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4))
	& (!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
	& (!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6))
	& (!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4))
    SAFETY
	  [](((obs4) -> X (!obsX4)))
	& [](((obs2) -> X (!obsX2)))
	& [](((obs6) -> X (!obsX6)))
	& []((loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))))
	& []((loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))))
	& []((loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))))
	& []((loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))))
	& []((loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))))
	& [](X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4)))
	& [](X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4)))
	& [](X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))
	& [](X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6)))
	& [](X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)))
    LIVENESS
	  []<>(home)
	& []<>(goal)

------------------------------------------------------------
INFO:tulip.spec.form:convert string variables to integers...
DEBUG:tulip.spec.form:home is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{}



DEBUG:tulip.spec.form:check if: home, is in cache.
INFO:tulip.spec.form:AST cache does not contain:
	home
Need to parse.
INFO:tulip.spec.form:parsing ASTs to cache them...
DEBUG:tulip.spec.form:parse: home
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NAME,'home',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NAME . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107b53c50> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Var @ 0x107b53c50> (Var('home'))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X0")
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107b53bd0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107b53c90> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107b92490> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107b92490>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107b92490> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Comparator @ 0x107b92490> (Comparator('=', Var('loc'), Str('X0')))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106940350> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107b92610> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107b922d0> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107b922d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107b922d0> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107b922d0>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107b922d0> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107b922d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107b92410> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'goal',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107b53b10> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107b92590> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107ba02d0> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('goal'),'&',<Unary @ 0x107ba02d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107ba01d0> (Binary('&', Var('goal'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107ba0110> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x101bff110> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107ba01d0>,'&',<Unary @ 0x101bff110>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x101bff1d0> (Binary('&', Binary('&', Var('goal'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107ba0410> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107b92350> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x101bff1d0>,'&',<Unary @ 0x107b92350>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb72d0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x101bf2ed0> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7b10> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb72d0>,'&',<Unary @ 0x107bb7b10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7a50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bb7a50>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7a50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107b92410>,'|',<Binary @ 0x107bb7a50>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107b92290> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107b92290> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107b53d10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bb7390> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7610> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bb7610>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7610> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bb7610>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7610> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bb7610>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7890> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obsX2',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7550> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7690> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7c10> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX2'),'&',<Unary @ 0x107bb7c10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7790> (Binary('&', Var('obsX2'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7650> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7950> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb7790>,'&',<Unary @ 0x107bb7950>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7b90> (Binary('&', Binary('&', Var('obsX2'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7750> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7590> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb7b90>,'&',<Unary @ 0x107bb7590>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7a90> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7910> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb75d0> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb7a90>,'&',<Unary @ 0x107bb75d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7510> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bb7510>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7510> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bb7890>,'|',<Binary @ 0x107bb7510>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb73d0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bb73d0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107b92250> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bb7450> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7310> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bb7310>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7310> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bb7310>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7310> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bb7310>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7990> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NOT,'!',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT . LexToken(NAME,'home',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7810> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT expr . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7490> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb76d0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7bd0> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107bb7490>,'&',<Unary @ 0x107bb7bd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7c50> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7410> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7b50> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb7c50>,'&',<Unary @ 0x107bb7b50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb74d0> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb77d0> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7d50> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb74d0>,'&',<Unary @ 0x107bb7d50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7d10> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7710> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7e50> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb7d10>,'&',<Unary @ 0x107bb7e50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7e10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bb7e10>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7e10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bb7990>,'|',<Binary @ 0x107bb7e10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7ad0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bb7ad0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7350> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bb7f50> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7e90> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bb7e90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7e90> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bb7e90>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bb7e90> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bb7e90>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7d90> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'home',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7dd0> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7cd0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bb7f10> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('home'),'&',<Unary @ 0x107bb7f10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7f90> (Binary('&', Var('home'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7ed0> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce0d0> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bb7f90>,'&',<Unary @ 0x107bce0d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce110> (Binary('&', Binary('&', Var('home'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce090> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce210> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bce110>,'&',<Unary @ 0x107bce210>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce1d0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce150> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce290> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bce1d0>,'&',<Unary @ 0x107bce290>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce2d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bce2d0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce2d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bb7d90>,'|',<Binary @ 0x107bce2d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bb7fd0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bb7fd0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7850> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bce390> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bce3d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bce3d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bce3d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bce3d0>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bce3d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bce3d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce410> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NOT,'!',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT . LexToken(NAME,'home',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce050> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT expr . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce250> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce190> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce510> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107bce250>,'&',<Unary @ 0x107bce510>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce350> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce310> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce5d0> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bce350>,'&',<Unary @ 0x107bce5d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce450> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce550> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce6d0> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bce450>,'&',<Unary @ 0x107bce6d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce690> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce590> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce7d0> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bce690>,'&',<Unary @ 0x107bce7d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce790> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bce790>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce790> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bce410>,'|',<Binary @ 0x107bce790>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce490> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bce490> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bb7c90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bce8d0> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bce810> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bce810>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bce810> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bce810>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bce810> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bce810>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce710> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obsX6',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce750> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce650> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bce610> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX6'),'&',<Unary @ 0x107bce610>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce910> (Binary('&', Var('obsX6'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce850> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bcea10> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bce910>,'&',<Unary @ 0x107bcea10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bcea50> (Binary('&', Binary('&', Var('obsX6'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce9d0> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bceb50> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bcea50>,'&',<Unary @ 0x107bceb50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bceb10> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bcea90> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bcebd0> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bceb10>,'&',<Unary @ 0x107bcebd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bcec10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bcec10>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bcec10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bce710>,'|',<Binary @ 0x107bcec10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bce950> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bce950> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce4d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bcecd0> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bced10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bced10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bced10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bced10>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bced10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bced10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bced50> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NOT,'!',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT . LexToken(NAME,'home',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce890> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT expr . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bceb90> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bcead0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bcee50> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107bceb90>,'&',<Unary @ 0x107bcee50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bcec90> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bcec50> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bcef10> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bcec90>,'&',<Unary @ 0x107bcef10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bced90> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bcee90> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bcef50> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bced90>,'&',<Unary @ 0x107bcef50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bcefd0> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bceed0> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bcef90> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bcefd0>,'&',<Unary @ 0x107bcef90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4090> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc4090>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4090> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bced50>,'|',<Binary @ 0x107bc4090>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bcedd0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bcedd0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bce990> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc4250> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4190> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc4190>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4190> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc4190>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4190> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bc4190>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4110> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obsX4',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc40d0> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4050> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4150> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX4'),'&',<Unary @ 0x107bc4150>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4290> (Binary('&', Var('obsX4'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc41d0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4390> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bc4290>,'&',<Unary @ 0x107bc4390>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc43d0> (Binary('&', Binary('&', Var('obsX4'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4350> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc44d0> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bc43d0>,'&',<Unary @ 0x107bc44d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4490> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4410> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4550> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bc4490>,'&',<Unary @ 0x107bc4550>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4590> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc4590>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4590> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bc4110>,'|',<Binary @ 0x107bc4590>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc42d0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc42d0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bcee10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc4650> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4690> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc4690>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4690> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc4690>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4690> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107bc4690>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc46d0> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NOT,'!',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT . LexToken(NAME,'home',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4210> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT expr . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4510> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4450> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc47d0> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107bc4510>,'&',<Unary @ 0x107bc47d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4610> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc45d0> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4890> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bc4610>,'&',<Unary @ 0x107bc4890>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4710> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4810> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4990> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bc4710>,'&',<Unary @ 0x107bc4990>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4950> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4850> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4a90> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107bc4950>,'&',<Unary @ 0x107bc4a90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4a50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc4a50>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4a50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bc46d0>,'|',<Binary @ 0x107bc4a50>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4750> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc4750> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((obs4) -> X (!obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'obs4',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(RPAREN,')',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4310> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',Var('obs4'),')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4310> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(IMP,'->',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP . LexToken(NEXT,'X',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT . LexToken(LPAREN,'(',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN . LexToken(NOT,'!',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT . LexToken(NAME,'obsX4',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT NAME . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc49d0> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT expr . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4b50> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr . LexToken(RPAREN,')',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc4b50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4b50> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Unary @ 0x107bc4b50>] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4ad0> (Unary('X', Unary('!', Var('obsX4'))))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [Var('obs4'),'->',<Unary @ 0x107bc4ad0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4bd0> (Binary('->', Var('obs4'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc4bd0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4bd0> (Binary('->', Var('obs4'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc4bd0> (Binary('->', Var('obs4'), Unary('X', Una ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((obs2) -> X (!obsX2))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'obs2',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(RPAREN,')',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4790> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',Var('obs2'),')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4790> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(IMP,'->',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP . LexToken(NEXT,'X',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT . LexToken(LPAREN,'(',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN . LexToken(NOT,'!',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT . LexToken(NAME,'obsX2',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT NAME . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc48d0> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT expr . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4d10> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr . LexToken(RPAREN,')',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc4d10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4d10> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Unary @ 0x107bc4d10>] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4c50> (Unary('X', Unary('!', Var('obsX2'))))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [Var('obs2'),'->',<Unary @ 0x107bc4c50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4c90> (Binary('->', Var('obs2'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc4c90>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4c90> (Binary('->', Var('obs2'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc4c90> (Binary('->', Var('obs2'), Unary('X', Una ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((obs6) -> X (!obsX6))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'obs6',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(RPAREN,')',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs6'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4a10> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',Var('obs6'),')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4a10> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(IMP,'->',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP . LexToken(NEXT,'X',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT . LexToken(LPAREN,'(',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN . LexToken(NOT,'!',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT . LexToken(NAME,'obsX6',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT NAME . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4b90> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT expr . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4e50> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr . LexToken(RPAREN,')',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc4e50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4e50> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Unary @ 0x107bc4e50>] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc4d90> (Unary('X', Unary('!', Var('obsX6'))))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [Var('obs6'),'->',<Unary @ 0x107bc4d90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4dd0> (Binary('->', Var('obs6'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc4dd0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4dd0> (Binary('->', Var('obs6'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc4dd0> (Binary('->', Var('obs6'), Unary('X', Una ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4910> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc4c10> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4f10> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc4f10>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4f10> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4cd0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc4f50> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4e10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc4e10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc4e10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc4e10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9050> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9050>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9050> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9050>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9050> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4d50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc4e90> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc91d0> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc91d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc91d0> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc91d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9110> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9110>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9110> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9110>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9110> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bc9050>,'|',<Unary @ 0x107bc9110>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4fd0> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc4fd0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4fd0> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bc4f10>,'->',<Binary @ 0x107bc4fd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc4f90> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc4f90> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4b10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9310> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc92d0> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc92d0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc92d0> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9210> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc93d0> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9290> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9290>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9290> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc9290>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9390> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9390>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9390> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9390>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9390> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9150> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9250> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc90d0> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc90d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc90d0> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc90d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9450> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9450>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9450> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9450>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9450> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bc9390>,'|',<Unary @ 0x107bc9450>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9490> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc9490>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9490> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bc92d0>,'->',<Binary @ 0x107bc9490>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9090> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc9090> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc4ed0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9650> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9610> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9610>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9610> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9550> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9710> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc95d0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc95d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc95d0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc95d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc96d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc96d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc96d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc96d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc96d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc94d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9590> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9410> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9410>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9410> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc9410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9790> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9790>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9790> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9790>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9790> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bc96d0>,'|',<Unary @ 0x107bc9790>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc97d0> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9750> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc98d0> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc99d0> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc99d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc99d0> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc99d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9690> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9690>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9690> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9690>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9690> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x107bc97d0>,'|',<Unary @ 0x107bc9690>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9910> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc9910>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9910> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bc9610>,'->',<Binary @ 0x107bc9910>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9510> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc9510> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9190> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9ad0> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9a90> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9a90>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9a90> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9850> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9b90> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9a50> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9a50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9a50> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc9a50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9b50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9b50>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9b50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9b50>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9b50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9950> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9a10> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9890> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9890>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9890> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc9890>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9c10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9c10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9c10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9c10>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9c10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bc9b50>,'|',<Unary @ 0x107bc9c10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9c50> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc9c50>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9c50> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bc9a90>,'->',<Binary @ 0x107bc9c50>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9990> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc9990> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9350> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9e10> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9dd0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9dd0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9dd0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9d10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9ed0> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9d90> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9d90>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9d90> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc9d90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9e90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9e90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9e90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9e90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9e90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9c90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9d50> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9bd0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bc9bd0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bc9bd0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bc9bd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9f50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9f50>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9f50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bc9f50>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bc9f50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bc9e90>,'|',<Unary @ 0x107bc9f50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9f90> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9f10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bc9e50> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf1d0> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf1d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf1d0> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbf1d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf150> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf150>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf150> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf150>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf150> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x107bc9f90>,'|',<Unary @ 0x107bbf150>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9fd0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bc9fd0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9fd0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bc9dd0>,'->',<Binary @ 0x107bc9fd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bc9cd0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bc9cd0> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9810> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf2d0> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf290> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf290>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf290> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf050> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf390> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf250> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf250>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf250> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbf250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf350> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf350>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf350> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf350>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf350> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf190> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf210> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf090> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf090>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf090> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbf090>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf410> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf410>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf410> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf410>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf410> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bbf350>,'|',<Unary @ 0x107bbf410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf450> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bbf450>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf450> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bbf290>,'->',<Binary @ 0x107bbf450>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf0d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bbf0d0> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bc9b10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf610> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf5d0> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf5d0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf5d0> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf510> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf6d0> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf590> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf590>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf590> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbf590>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf690> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf690>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf690> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf690>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf690> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf490> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf550> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf3d0> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf3d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf3d0> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbf3d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf750> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf750>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf750> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf750>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf750> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bbf690>,'|',<Unary @ 0x107bbf750>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf790> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf710> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf890> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf990> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf990>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf990> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbf990>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf650> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf650>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf650> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbf650>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbf650> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x107bbf790>,'|',<Unary @ 0x107bbf650>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf8d0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bbf8d0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf8d0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bbf5d0>,'->',<Binary @ 0x107bbf8d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf4d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bbf4d0> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf110> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbfa90> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbfa50> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbfa50>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbfa50> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf810> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbfb50> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbfa10> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbfa10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbfa10> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbfa10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfb10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfb10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfb10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfb10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfb10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf910> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbf9d0> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf850> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbf850>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbf850> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbf850>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfbd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfbd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfbd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfbd0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfbd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107bbfb10>,'|',<Unary @ 0x107bbfbd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbfc10> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbfb90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbfd10> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbfe10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbfe10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbfe10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbfe10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfad0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfad0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfad0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,77)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfad0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfad0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,77)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x107bbfc10>,'|',<Unary @ 0x107bbfad0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbfd50> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,77)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,80)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,81)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,82)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,83)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,84)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,88)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbfcd0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,88)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,90)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,91)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,93)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,94)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbfe50> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,94)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbff50> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,94)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,95)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbff50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbff50> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,95)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107bbff50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfc50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,95)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,96)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfc50>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfc50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,96)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,97)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107bbfc50>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107bbfc50> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,97)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x107bbfd50>,'|',<Unary @ 0x107bbfc50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbfe90> (Binary('|', Binary('|', Binary('|', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,97)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107bbfe90>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbfe90> (Binary('|', Binary('|', Binary('|', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bbfa50>,'->',<Binary @ 0x107bbfe90>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbf950> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bbf950> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf310> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbfdd0> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbff10> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107bbff10>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107bbff10> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbff90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107bbffd0> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97050> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c97050>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97050> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107c97050>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97110> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c97110>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97110> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c97110>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97110> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbfed0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c97150> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97090> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c97090>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97090> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107c97090>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c971d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c971d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c971d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c971d0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c971d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107c97110>,'|',<Unary @ 0x107c971d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97210> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97190> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c97310> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97410> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c97410>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97410> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107c97410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c970d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c970d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c970d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c970d0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c970d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x107c97210>,'|',<Unary @ 0x107c970d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97350> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c97350>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97350> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107bbff10>,'->',<Binary @ 0x107c97350>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107bbfc90> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107bbfc90> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbf7d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c972d0> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97250> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c97250>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97250> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'goal',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97490> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97450> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c975d0> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('goal'),'&',<Unary @ 0x107c975d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c974d0> (Binary('&', Var('goal'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97390> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97650> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c974d0>,'&',<Unary @ 0x107c97650>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97690> (Binary('&', Binary('&', Var('goal'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97610> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97790> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c97690>,'&',<Unary @ 0x107c97790>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97750> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c976d0> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97810> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c97750>,'&',<Unary @ 0x107c97810>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97850> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c97850>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97850> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c97250>,'->',<Binary @ 0x107c97850>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97590> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c97590>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97590> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c97590>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97510> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c97510> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107bbfd90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c97910> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97990> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c97990>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97990> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obsX2',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97550> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c979d0> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97a90> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX2'),'&',<Unary @ 0x107c97a90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c973d0> (Binary('&', Var('obsX2'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c977d0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97b10> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c973d0>,'&',<Unary @ 0x107c97b10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97b50> (Binary('&', Binary('&', Var('obsX2'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97ad0> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97c50> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c97b50>,'&',<Unary @ 0x107c97c50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97c10> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97b90> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97cd0> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c97c10>,'&',<Unary @ 0x107c97cd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97d10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c97d10>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97d10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c97990>,'->',<Binary @ 0x107c97d10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97a50> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c97a50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97a50> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c97a50>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c978d0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c978d0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97290> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c97dd0> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97e50> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c97e50>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c97e50> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NOT,'!',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT . LexToken(NAME,'home',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97a10> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT expr . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97c90> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97bd0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97f50> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107c97c90>,'&',<Unary @ 0x107c97f50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97890> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97f10> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97fd0> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c97890>,'&',<Unary @ 0x107c97fd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97d50> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97f90> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1150> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c97d50>,'&',<Unary @ 0x107cc1150>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1110> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1090> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1250> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1110>,'&',<Unary @ 0x107cc1250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1210> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107cc1210>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1210> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c97e50>,'->',<Binary @ 0x107cc1210>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97ed0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c97ed0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c97ed0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c97ed0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c97d90> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c97d90> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97950> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107cc1310> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107cc11d0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107cc11d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107cc11d0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'home',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1050> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc13d0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1410> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('home'),'&',<Unary @ 0x107cc1410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1350> (Binary('&', Var('home'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc10d0> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1490> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1350>,'&',<Unary @ 0x107cc1490>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc14d0> (Binary('&', Binary('&', Var('home'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1450> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc15d0> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc14d0>,'&',<Unary @ 0x107cc15d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1590> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1510> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1650> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1590>,'&',<Unary @ 0x107cc1650>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1690> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107cc1690>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1690> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107cc11d0>,'->',<Binary @ 0x107cc1690>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1290> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107cc1290>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1290> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107cc1290>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1390> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107cc1390> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97e10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107cc1750> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107cc17d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107cc17d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107cc17d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NOT,'!',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT . LexToken(NAME,'home',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc12d0> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT expr . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1610> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1550> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc18d0> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107cc1610>,'&',<Unary @ 0x107cc18d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1190> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1890> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1990> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1190>,'&',<Unary @ 0x107cc1990>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc16d0> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1910> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1a90> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc16d0>,'&',<Unary @ 0x107cc1a90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1a50> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1950> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1b90> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1a50>,'&',<Unary @ 0x107cc1b90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1b50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107cc1b50>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1b50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107cc17d0>,'->',<Binary @ 0x107cc1b50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1850> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107cc1850>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1850> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107cc1850>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1710> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107cc1710> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c97e90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107cc1c90> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107cc1b10> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107cc1b10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107cc1b10> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obsX6',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc19d0> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1d10> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1d50> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX6'),'&',<Unary @ 0x107cc1d50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1810> (Binary('&', Var('obsX6'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1a10> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1dd0> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1810>,'&',<Unary @ 0x107cc1dd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1e10> (Binary('&', Binary('&', Var('obsX6'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1d90> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1f10> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1e10>,'&',<Unary @ 0x107cc1f10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1ed0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1e50> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1f90> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107cc1ed0>,'&',<Unary @ 0x107cc1f90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1fd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107cc1fd0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1fd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107cc1b10>,'->',<Binary @ 0x107cc1fd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1bd0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107cc1bd0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107cc1bd0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107cc1bd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1cd0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107cc1cd0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1790> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107cc1ad0> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c950d0> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c950d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c950d0> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NOT,'!',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT . LexToken(NAME,'home',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1c10> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT expr . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95190> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95110> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95250> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107c95190>,'&',<Unary @ 0x107c95250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95150> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95210> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95310> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95150>,'&',<Unary @ 0x107c95310>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95050> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95290> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95410> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95050>,'&',<Unary @ 0x107c95410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c953d0> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c952d0> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95510> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c953d0>,'&',<Unary @ 0x107c95510>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c954d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c954d0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c954d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c950d0>,'->',<Binary @ 0x107c954d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c951d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c951d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c951d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c951d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107cc1e90> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107cc1e90> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1c50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c95610> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95490> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c95490>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95490> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obsX4',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95350> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95690> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c956d0> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX4'),'&',<Unary @ 0x107c956d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95090> (Binary('&', Var('obsX4'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95390> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95750> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95090>,'&',<Unary @ 0x107c95750>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95790> (Binary('&', Binary('&', Var('obsX4'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95710> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95890> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95790>,'&',<Unary @ 0x107c95890>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95850> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c957d0> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95910> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,62)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95850>,'&',<Unary @ 0x107c95910>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95950> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c95950>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95950> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c95490>,'->',<Binary @ 0x107c95950>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95550> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c95550>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95550> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c95550>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95650> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c95650> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107cc1f50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c95a10> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95a90> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c95a90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95a90> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NOT,'!',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT . LexToken(NAME,'home',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95590> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT expr . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c958d0> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95810> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95b90> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x107c958d0>,'&',<Unary @ 0x107c95b90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95450> (Binary('&', Unary('!', Var('home')), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95b50> (Var('obsX2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95c50> (Unary('!', Var('obsX2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95450>,'&',<Unary @ 0x107c95c50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95990> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX6',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95bd0> (Var('obsX6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95d50> (Unary('!', Var('obsX6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95990>,'&',<Unary @ 0x107c95d50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95d10> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX4',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95c10> (Var('obsX4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c95e50> (Unary('!', Var('obsX4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c95d10>,'&',<Unary @ 0x107c95e50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95e10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c95e10>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95e10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c95a90>,'->',<Binary @ 0x107c95e10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95b10> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c95b10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95b10> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c95b10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c959d0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c959d0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:home is already in cache
DEBUG:tulip.spec.form:parse: goal
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NAME,'goal',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NAME . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c955d0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Var @ 0x107c955d0> (Var('goal'))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((eloc = "X2")) -> (((X(eloc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'eloc',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95a50> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c95f90> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95dd0> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c95dd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95dd0> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c95dd0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95dd0> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,22)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,23)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,29)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95c90> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c95d90> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95f50> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c95f50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c95f50> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107c95f50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b050> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b050>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b050> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,38)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b050>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b050> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b050>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b050> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c95dd0>,'->',<Unary @ 0x107c9b050>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c95ed0> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107c95ed0> (Binary('->', Comparator('=', Var('eloc') ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((eloc = "X6")) -> (((X(eloc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'eloc',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95f10> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c95ad0> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b150> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b150>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b150> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b150>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b150> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,22)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,23)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,29)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95cd0> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c95fd0> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b110> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b110>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b110> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107c9b110>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b250> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b250>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b250> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,38)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b250>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b250> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b250>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b250> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c9b150>,'->',<Unary @ 0x107c9b250>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b090> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107c9b090> (Binary('->', Comparator('=', Var('eloc') ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'eloc',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c95e90> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9b3d0> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b390> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b390>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b390> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b390>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b390> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,22)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,23)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,29)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b2d0> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9b490> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b350> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b350>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b350> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107c9b350>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b450> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b450>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b450> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,39)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b450>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b450> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b1d0> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,57)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9b310> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,57)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b190> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,58)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b190>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b190> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,58)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x107c9b190>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b510> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,59)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b510>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b510> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,60)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x107c9b510>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b510> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,60)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107c9b450>,'|',<Unary @ 0x107c9b510>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b550> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9b550>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b550> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c9b390>,'->',<Binary @ 0x107c9b550>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b290> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107c9b290> (Binary('->', Comparator('=', Var('eloc') ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((eloc = "X2") -> (obs2 && !obs6 && !obs4))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b210> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9b4d0> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b0d0> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b0d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b0d0> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obs2',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b690> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs6',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b650> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b7d0> (Unary('!', Var('obs6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs2'),'&',<Unary @ 0x107c9b7d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b6d0> (Binary('&', Var('obs2'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs4',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b590> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b850> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c9b6d0>,'&',<Unary @ 0x107c9b850>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b890> (Binary('&', Binary('&', Var('obs2'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9b890>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b890> (Binary('&', Binary('&', Var('obs2'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c9b0d0>,'->',<Binary @ 0x107c9b890>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b790> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9b790>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b790> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c9b790>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b710> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c9b710> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((eloc = "X6") -> (obs6 && !obs4 && !obs2))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b410> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9b750> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b910> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9b910>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9b910> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obs6',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs6'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b810> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs4',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b990> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9bad0> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs6'),'&',<Unary @ 0x107c9bad0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9b5d0> (Binary('&', Var('obs6'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b8d0> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9bb50> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c9b5d0>,'&',<Unary @ 0x107c9bb50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9bb90> (Binary('&', Binary('&', Var('obs6'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9bb90>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9bb90> (Binary('&', Binary('&', Var('obs6'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c9b910>,'->',<Binary @ 0x107c9bb90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9ba90> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9ba90>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9ba90> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c9ba90>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9b9d0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c9b9d0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((eloc = "X4") -> (obs4 && !obs6 && !obs2))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b610> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9ba50> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9bc10> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9bc10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9bc10> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obs4',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9bb10> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs6',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9bc90> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9bdd0> (Unary('!', Var('obs6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs4'),'&',<Unary @ 0x107c9bdd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9ba10> (Binary('&', Var('obs4'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9bbd0> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9be50> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c9ba10>,'&',<Unary @ 0x107c9be50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9be90> (Binary('&', Binary('&', Var('obs4'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9be90>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9be90> (Binary('&', Binary('&', Var('obs4'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x107c9bc10>,'->',<Binary @ 0x107c9be90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9bd90> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9bd90>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9bd90> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x107c9bd90>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9bcd0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x107c9bcd0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (eloc = "X2")
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'eloc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9b950> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9bfd0> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9bd10> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9bd10>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9bd10> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Comparator @ 0x107c9bd10> (Comparator('=', Var('eloc'), Str('X2')))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((eloc = "X2")) || (obs2 && !obs6 && !obs4)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9bc50> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9bf10> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d090> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9d090>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d090> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,17)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9d090>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d090> (Comparator('=', Var('eloc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,17)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107c9d090>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9be10> (Unary('!', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obs2',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9bf90> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs6',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9bd50> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d050> (Unary('!', Var('obs6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs2'),'&',<Unary @ 0x107c9d050>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d0d0> (Binary('&', Var('obs2'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs4',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d150> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d210> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c9d0d0>,'&',<Unary @ 0x107c9d210>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d250> (Binary('&', Binary('&', Var('obs2'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9d250>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d250> (Binary('&', Binary('&', Var('obs2'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107c9be10>,'|',<Binary @ 0x107c9d250>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9bed0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107c9bed0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((eloc = "X6")) || (obs6 && !obs4 && !obs2)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9bf50> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9d110> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d390> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9d390>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d390> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,17)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9d390>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d390> (Comparator('=', Var('eloc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,17)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107c9d390>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d350> (Unary('!', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obs6',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs6'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d290> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs4',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d1d0> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d310> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs6'),'&',<Unary @ 0x107c9d310>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d2d0> (Binary('&', Var('obs6'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs2',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d3d0> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d510> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c9d2d0>,'&',<Unary @ 0x107c9d510>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d550> (Binary('&', Binary('&', Var('obs6'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9d550>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d550> (Binary('&', Binary('&', Var('obs6'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107c9d350>,'|',<Binary @ 0x107c9d550>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d450> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107c9d450> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((eloc = "X4")) || (obs4 && !obs6 && !obs2)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d190> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x107c9d410> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d690> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9d690>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d690> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,17)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x107c9d690>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x107c9d690> (Comparator('=', Var('eloc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,17)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x107c9d690>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d650> (Unary('!', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obs4',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d590> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs6',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs6'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d4d0> (Var('obs6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs6')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d610> (Unary('!', Var('obs6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs4'),'&',<Unary @ 0x107c9d610>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d5d0> (Binary('&', Var('obs4'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs2',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x107c9d6d0> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x107c9d810> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x107c9d5d0>,'&',<Unary @ 0x107c9d810>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d850> (Binary('&', Binary('&', Var('obs4'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x107c9d850>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d850> (Binary('&', Binary('&', Var('obs4'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x107c9d650>,'|',<Binary @ 0x107c9d850>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x107c9d750> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x107c9d750> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
INFO:tulip.spec.form:collecting garbage from GRSpec cache...
INFO:tulip.spec.form:cleaned 0 cached elements.

INFO:tulip.spec.form:done parsing ASTs.

DEBUG:tulip.spec.form:(loc = "X0") is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X0"), is in cache.
DEBUG:tulip.spec.form:(loc = "X0") is already in cache
DEBUG:tulip.spec.form:!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4) is already in cache
DEBUG:tulip.spec.form:!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4) is already in cache
DEBUG:tulip.spec.form:!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is already in cache
DEBUG:tulip.spec.form:!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4) is already in cache
DEBUG:tulip.spec.form:!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is already in cache
DEBUG:tulip.spec.form:!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4) is already in cache
DEBUG:tulip.spec.form:!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is already in cache
DEBUG:tulip.spec.form:!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6), is in cache.
DEBUG:tulip.spec.form:!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6) is already in cache
DEBUG:tulip.spec.form:!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4), is in cache.
DEBUG:tulip.spec.form:!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is already in cache
DEBUG:tulip.spec.form:((obs4) -> X (!obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((obs4) -> X (!obsX4)), is in cache.
DEBUG:tulip.spec.form:((obs4) -> X (!obsX4)) is already in cache
DEBUG:tulip.spec.form:((obs2) -> X (!obsX2)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((obs2) -> X (!obsX2)), is in cache.
DEBUG:tulip.spec.form:((obs2) -> X (!obsX2)) is already in cache
DEBUG:tulip.spec.form:((obs6) -> X (!obsX6)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((obs6) -> X (!obsX6)), is in cache.
DEBUG:tulip.spec.form:((obs6) -> X (!obsX6)) is already in cache
DEBUG:tulip.spec.form:(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is already in cache
DEBUG:tulip.spec.form:home is in _bool_int cache
DEBUG:tulip.spec.form:goal is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: goal, is in cache.
DEBUG:tulip.spec.form:goal is already in cache
DEBUG:tulip.spec.form:((eloc = "X2")) -> (((X(eloc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((eloc = "X2")) -> (((X(eloc = "X4")))), is in cache.
DEBUG:tulip.spec.form:((eloc = "X2")) -> (((X(eloc = "X4")))) is already in cache
DEBUG:tulip.spec.form:((eloc = "X6")) -> (((X(eloc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((eloc = "X6")) -> (((X(eloc = "X4")))), is in cache.
DEBUG:tulip.spec.form:((eloc = "X6")) -> (((X(eloc = "X4")))) is already in cache
DEBUG:tulip.spec.form:((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6")))), is in cache.
DEBUG:tulip.spec.form:((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6")))) is already in cache
DEBUG:tulip.spec.form:X((eloc = "X2") -> (obs2 && !obs6 && !obs4)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((eloc = "X2") -> (obs2 && !obs6 && !obs4)), is in cache.
DEBUG:tulip.spec.form:X((eloc = "X2") -> (obs2 && !obs6 && !obs4)) is already in cache
DEBUG:tulip.spec.form:X((eloc = "X6") -> (obs6 && !obs4 && !obs2)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((eloc = "X6") -> (obs6 && !obs4 && !obs2)), is in cache.
DEBUG:tulip.spec.form:X((eloc = "X6") -> (obs6 && !obs4 && !obs2)) is already in cache
DEBUG:tulip.spec.form:X((eloc = "X4") -> (obs4 && !obs6 && !obs2)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((eloc = "X4") -> (obs4 && !obs6 && !obs2)), is in cache.
DEBUG:tulip.spec.form:X((eloc = "X4") -> (obs4 && !obs6 && !obs2)) is already in cache
DEBUG:tulip.spec.form:(eloc = "X2") is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (eloc = "X2"), is in cache.
DEBUG:tulip.spec.form:(eloc = "X2") is already in cache
DEBUG:tulip.spec.form:!((eloc = "X2")) || (obs2 && !obs6 && !obs4) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((eloc = "X2")) || (obs2 && !obs6 && !obs4), is in cache.
DEBUG:tulip.spec.form:!((eloc = "X2")) || (obs2 && !obs6 && !obs4) is already in cache
DEBUG:tulip.spec.form:!((eloc = "X6")) || (obs6 && !obs4 && !obs2) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((eloc = "X6")) || (obs6 && !obs4 && !obs2), is in cache.
DEBUG:tulip.spec.form:!((eloc = "X6")) || (obs6 && !obs4 && !obs2) is already in cache
DEBUG:tulip.spec.form:!((eloc = "X4")) || (obs4 && !obs6 && !obs2) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((eloc = "X4")) || (obs4 && !obs6 && !obs2), is in cache.
DEBUG:tulip.spec.form:!((eloc = "X4")) || (obs4 && !obs6 && !obs2) is already in cache
INFO:tulip.spec.form:done converting to integer variables.

DEBUG:omega.logic.bitvector:int in (0, 8)
DEBUG:omega.logic.bitvector:int in (0, 2)
INFO:omega.logic.bitvector:-- done bitblasting vars table

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('eloc', var), Num('0', num)), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var)))))), Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('eloc', var), Num('0', num)), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('eloc', var), Num('0', num)), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Unary('!', Var('obs6', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs6', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num))))), Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('1', num))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var))))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var)))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))), Comparator('<=', Unary('X', Var('eloc', var)), Num('2', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num))))), Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('1', num))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('1', num))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 1 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Unary('!', Var('obs6', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var)))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))), Comparator('<=', Unary('X', Var('eloc', var)), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 1 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs6', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs6', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))), Comparator('<=', Unary('X', Var('eloc', var)), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('eloc', var)), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '1', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '1', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '1', '0', '0']
q = ["eloc_0'", "eloc_1'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0' 1
1: | & 0 ! eloc_0' & ^ 0 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0' 1
1: | & 0 ! eloc_0' & ^ 0 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var))))))), Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('goal', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX2', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('home', var), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('5', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX6', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX4', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))), Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX4', var)))), Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX2', var))))), Binary('&', Binary('=>', Var('obs6', var), Unary('X', Unary('!', Var('obsX6', var)))), Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))))), Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))))))), Binary('&', Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX4', var)))), Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX2', var))))), Binary('&', Binary('=>', Var('obs6', var), Unary('X', Unary('!', Var('obsX6', var)))), Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))))), Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX4', var)))), Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX2', var))))), Binary('&', Binary('=>', Var('obs6', var), Unary('X', Unary('!', Var('obsX6', var)))), Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX4', var)))), Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX2', var))))), Binary('&', Binary('=>', Var('obs6', var), Unary('X', Unary('!', Var('obsX6', var)))), Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX4', var)))), Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX2', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX2', var))))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Var('obs6', var), Unary('X', Unary('!', Var('obsX6', var)))), Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Var('obs6', var), Unary('X', Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('5', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('5', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('goal', var), Unary('!', Var('home', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('goal', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX2', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX2', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('home', var), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('home', var), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX6', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX6', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX4', var), Unary('!', Var('home', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX4', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var))), Unary('!', Var('obsX4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var))), Unary('!', Var('obsX2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('home', var)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
DEBUG:omega.logic.bitvector:int in (0, 8)
INFO:omega.logic.bitvector:"int" found as type (instead of "saturating")
DEBUG:omega.logic.bitvector:int in (0, 1)
DEBUG:omega.logic.bitvector:int in (0, 2)
INFO:omega.logic.bitvector:"int" found as type (instead of "saturating")
INFO:omega.logic.bitvector:-- done bitblasting vars table

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))), Comparator('<=', Unary('X', Var('eloc', var)), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0 1
1: | & 0 ! eloc_0 & ^ 0 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('eloc', var)), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '1', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '1', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '1', '0', '0']
q = ["eloc_0'", "eloc_1'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0' 1
1: | & 0 ! eloc_0' & ^ 0 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! eloc_0' 1
1: | & 0 ! eloc_0' & ^ 0 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0']
q = ['_goal_0', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '0', '0']
	 y = ['_goal_0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '0', '0']
q = ['_goal_0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))), Comparator('<=', Num('0', num), Unary('X', Var('_goal', var)))), Comparator('<=', Unary('X', Var('_goal', var)), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))), Comparator('<=', Num('0', num), Unary('X', Var('_goal', var)))), Comparator('<=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))), Comparator('<=', Num('0', num), Unary('X', Var('_goal', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0']
q = ['_goal_0', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '0', '0']
	 y = ['_goal_0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '0', '0']
q = ['_goal_0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('_goal', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0']
	 y = ["_goal_0'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0']
q = ["_goal_0'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0' ! 0 1
1: | & _goal_0' ! 0 & ^ _goal_0' ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0' ! 0 1
1: | & _goal_0' ! 0 & ^ _goal_0' ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '0']
	 y = ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '0', '0']
	 y = ["_goal_0'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '0', '0']
q = ["_goal_0'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0' 1
1: | & 1 ! _goal_0' & ^ 1 ! _goal_0' 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0' 1
1: | & 1 ! _goal_0' & ^ 1 ! _goal_0' 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('0', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('1', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('0', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('1', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('0', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('1', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 3, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 0, 'obsX2': False, 'eloc': 0, 'obsX4': False, 'home': True, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Var('home', var)), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Var('home', var)), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Var('home', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
INFO:omega.games.enumeration:1 initial nodes
DEBUG:omega.games.enumeration:at node: {'loc': 3, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 0, 'obsX2': False, 'eloc': 0, 'obsX4': False, 'home': True, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 1, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 4, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 1, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 0, "obs2'": True, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 1, 'obsX2': True, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': False, 'obs2': True, 'eloc': 0}
next sys: {'obsX2': True, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 1, '_goal': 1}

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 1, "obs2'": False, "obs6'": True}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 1, 'obsX2': True, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': True, 'obs4': False, 'obs2': False, 'eloc': 1}
next sys: {'obsX2': True, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 1, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 1, 'obsX2': True, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 8, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 1, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 8, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 8, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 1, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 0, "obs2'": True, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 0, 'goal': True, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 1, 'obsX2': False, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': False, 'obs2': True, 'eloc': 0}
next sys: {'obsX2': False, 'obsX6': False, 'goal': True, 'obsX4': False, 'home': False, 'loc': 0, '_goal': 1}

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 1, "obs2'": False, "obs6'": True}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 0, 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 1, 'obsX2': False, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': True, 'obs4': False, 'obs2': False, 'eloc': 1}
next sys: {'obsX2': False, 'obsX6': False, 'goal': True, 'obsX4': False, 'home': False, 'loc': 0, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 0, 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 1, 'obsX2': False, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 8, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 0, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 8, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 8, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 0, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 0, "obs2'": True, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 0, 'obsX2': True, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': False, 'obs2': True, 'eloc': 0}
next sys: {'obsX2': True, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 1, '_goal': 0}

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 1, "obs2'": False, "obs6'": True}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 0, 'obsX2': True, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX2', var), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': True, 'obs4': False, 'obs2': False, 'eloc': 1}
next sys: {'obsX2': True, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 1, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 0, 'obsX2': True, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 0, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs6', var)), Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs6', var))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var))), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 4, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, '_goal': 0, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 0, "obs2'": True, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': False, 'obs2': True, 'eloc': 0}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': True, 'loc': 3, '_goal': 0}

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "eloc'": 1, "obs2'": False, "obs6'": True}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 3, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 0, 'obsX2': False, 'eloc': 1, 'obsX4': False, 'home': True, 'obsX6': False}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num))))), Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Var('home', var)), Unary('!', Var('obsX6', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))), Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs6', var), Unary('!', Var('obs4', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs6', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs6', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num))), Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs2', var)), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX2', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX2', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX2', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX4', var)), Var('home', var)), Unary('!', Var('obsX6', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX4', var)), Var('home', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX4', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX4', var)"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX6', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX6', var)"
DEBUG:omega.games.enumeration:next env: {'obs6': True, 'obs4': False, 'obs2': False, 'eloc': 1}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': True, 'loc': 3, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 3, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, '_goal': 0, 'obsX2': False, 'eloc': 1, 'obsX4': False, 'home': True, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 4, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 0, 'obsX2': True, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 4, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 0, 'goal': True, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 1, 'obsX2': False, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 8, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, '_goal': 1, 'obsX2': True, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "eloc'": 2, "obs2'": False, "obs6'": False}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'obs6': False, 'obs4': True, 'obs2': False, 'eloc': 2}
next sys: {'obsX2': False, 'obsX6': False, 'goal': False, 'obsX4': False, 'home': False, 'loc': 8, '_goal': 1}

INFO:tulip.interfaces.omega:Winning set computed in 0.0375528335571 sec.
Symbolic strategy computed in 0.0671491622925 sec.
Strategy enumerated in 0.125077009201 sec.
INFO:tulip.synth:converting strategy (compact) to Mealy machine
DEBUG:tulip.transys.labeled_graphs:no label types passed
DEBUG:tulip.transys.labeled_graphs:no label types passed
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 0 ---> 1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 1, state: {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 1 ---> 2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 2, state: {'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 1 ---> 3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 3, state: {'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 2 ---> 4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 4, state: {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 3 ---> 4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 4, state: {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 4 ---> 5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 5, state: {'loc': 'X8', 'goal': True, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 4 ---> 6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 6, state: {'loc': 'X8', 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 5 ---> 7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 7, state: {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 6 ---> 7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 7, state: {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 7 ---> 8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 8, state: {'loc': 'X2', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 'X2', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 7 ---> 9
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 9, state: {'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 8 ---> 10
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 10, state: {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 9 ---> 10
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 10, state: {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': True, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': True, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 10 ---> 0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 0, state: {'loc': 'X0', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': True, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': True, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 10 ---> 11
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 11, state: {'loc': 'X0', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 11 ---> 1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 1, state: {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Adding new id: Sinit
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
INFO:tulip.spec.form:convert string variables to integers...
DEBUG:tulip.spec.form:home is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X0") is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4) is in _bool_int cache
DEBUG:tulip.spec.form:((obs4) -> X (!obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:((obs2) -> X (!obsX2)) is in _bool_int cache
DEBUG:tulip.spec.form:((obs6) -> X (!obsX6)) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4)) is in _bool_int cache
DEBUG:tulip.spec.form:home is in _bool_int cache
DEBUG:tulip.spec.form:goal is in _bool_int cache
DEBUG:tulip.spec.form:((eloc = "X2")) -> (((X(eloc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:((eloc = "X6")) -> (((X(eloc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6")))) is in _bool_int cache
DEBUG:tulip.spec.form:X((eloc = "X2") -> (obs2 && !obs6 && !obs4)) is in _bool_int cache
DEBUG:tulip.spec.form:X((eloc = "X6") -> (obs6 && !obs4 && !obs2)) is in _bool_int cache
DEBUG:tulip.spec.form:X((eloc = "X4") -> (obs4 && !obs6 && !obs2)) is in _bool_int cache
DEBUG:tulip.spec.form:(eloc = "X2") is in _bool_int cache
DEBUG:tulip.spec.form:!((eloc = "X2")) || (obs2 && !obs6 && !obs4) is in _bool_int cache
DEBUG:tulip.spec.form:!((eloc = "X6")) || (obs6 && !obs4 && !obs2) is in _bool_int cache
DEBUG:tulip.spec.form:!((eloc = "X4")) || (obs4 && !obs6 && !obs2) is in _bool_int cache
INFO:tulip.spec.form:done converting to integer variables.

INFO:tulip.spec.form:clauses to compile: ['home', '( loc = 3 )', '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )', '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )', '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )', '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )', '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )', '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )', '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )', '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )', '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )']
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: home, is in cache.
DEBUG:tulip.spec.form:home is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( loc = 3 ), is in cache.
DEBUG:tulip.spec.form:( loc = 3 ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) is already in cache
INFO:tulip.spec.form:after translation to python: ['home', '( loc == 3 )', '( ( not ( loc == 0 ) ) or ( ( ( ( goal and ( not home ) ) and ( not obsX2 ) ) and ( not obsX6 ) ) and ( not obsX4 ) ) )', '( ( not ( loc == 1 ) ) or ( ( ( ( obsX2 and ( not home ) ) and ( not goal ) ) and ( not obsX6 ) ) and ( not obsX4 ) ) )', '( ( not ( loc == 2 ) ) or ( ( ( ( ( not home ) and ( not goal ) ) and ( not obsX2 ) ) and ( not obsX6 ) ) and ( not obsX4 ) ) )', '( ( not ( loc == 3 ) ) or ( ( ( ( home and ( not goal ) ) and ( not obsX2 ) ) and ( not obsX6 ) ) and ( not obsX4 ) ) )', '( ( not ( loc == 4 ) ) or ( ( ( ( ( not home ) and ( not goal ) ) and ( not obsX2 ) ) and ( not obsX6 ) ) and ( not obsX4 ) ) )', '( ( not ( loc == 5 ) ) or ( ( ( ( obsX6 and ( not home ) ) and ( not goal ) ) and ( not obsX2 ) ) and ( not obsX4 ) ) )', '( ( not ( loc == 6 ) ) or ( ( ( ( ( not home ) and ( not goal ) ) and ( not obsX2 ) ) and ( not obsX6 ) ) and ( not obsX4 ) ) )', '( ( not ( loc == 7 ) ) or ( ( ( ( obsX4 and ( not home ) ) and ( not goal ) ) and ( not obsX2 ) ) and ( not obsX6 ) ) )', '( ( not ( loc == 8 ) ) or ( ( ( ( ( not home ) and ( not goal ) ) and ( not obsX2 ) ) and ( not obsX6 ) ) and ( not obsX4 ) ) )']
INFO:tulip.spec.form:clauses to compile: ['( eloc = 0 )', '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )', '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )', '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )']
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( eloc = 0 ), is in cache.
DEBUG:tulip.spec.form:( eloc = 0 ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "X2")) || (obs2 && !obs6 && !obs4)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X2'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '!((eloc = "X4")) || (obs4 && !obs6 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X4'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '!((eloc = "X6")) || (obs6 && !obs4 && !obs2)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('X6'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '!((loc = "X0")) || (home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X1")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X2")) || (obsX2 && !home && !goal && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X3")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X4")) || (obsX4 && !home && !goal && !obsX2 && !obsX6)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '!((loc = "X5")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X6")) || (obsX6 && !home && !goal && !obsX2 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '!((loc = "X7")) || (!home && !goal && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '!((loc = "X8")) || (goal && !home && !obsX2 && !obsX6 && !obsX4)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( eloc = 0 ) ) | ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4')))),
 '( ( ! ( eloc = 1 ) ) | ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2')))),
 '( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 2 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 1 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('1'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( obs2 & ( ! obs6 ) ) & ( ! obs4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 '( X ( ( eloc = 1 ) -> ( ( obs6 & ( ! obs4 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 '( X ( ( eloc = 2 ) -> ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( goal & ( ! home ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( obsX2 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( home & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( obsX6 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( obsX4 & ( ! home ) ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( ! home ) & ( ! goal ) ) & ( ! obsX2 ) ) & ( ! obsX6 ) ) & ( ! obsX4 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX2 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '( obs4 -> ( X ( ! obsX4 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '( obs6 -> ( X ( ! obsX6 ) ) )': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '((eloc = "X2")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X2')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((eloc = "X4")) -> (((X(eloc = "X2"))) || ((X(eloc = "X6"))))': Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('X2'))), Unary('X', Comparator('=', Var('eloc'), Str('X6'))))),
 '((eloc = "X6")) -> (((X(eloc = "X4"))))': Binary('->', Comparator('=', Var('eloc'), Str('X6')), Unary('X', Comparator('=', Var('eloc'), Str('X4')))),
 '((obs2) -> X (!obsX2))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX2')))),
 '((obs4) -> X (!obsX4))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX4')))),
 '((obs6) -> X (!obsX6))': Binary('->', Var('obs6'), Unary('X', Unary('!', Var('obsX6')))),
 '(eloc = "X2")': Comparator('=', Var('eloc'), Str('X2')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "X2") -> (obs2 && !obs6 && !obs4))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X2')), Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs6'))), Unary('!', Var('obs4'))))),
 'X((eloc = "X4") -> (obs4 && !obs6 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X4')), Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs6'))), Unary('!', Var('obs2'))))),
 'X((eloc = "X6") -> (obs6 && !obs4 && !obs2))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('X6')), Binary('&', Binary('&', Var('obs6'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))))),
 'X((loc = "X0") -> (home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X1") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X2") -> (obsX2 && !home && !goal && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX2'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X3") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X4") -> (obsX4 && !home && !goal && !obsX2 && !obsX6))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX4'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))))),
 'X((loc = "X5") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X6") -> (obsX6 && !home && !goal && !obsX2 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX6'), Unary('!', Var('home'))), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X7") -> (!home && !goal && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('home')), Unary('!', Var('goal'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'X((loc = "X8") -> (goal && !home && !obsX2 && !obsX6 && !obsX4))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('home'))), Unary('!', Var('obsX2'))), Unary('!', Var('obsX6'))), Unary('!', Var('obsX4'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( eloc = 2 ) ) | ( ( obs4 & ( ! obs6 ) ) & ( ! obs2 ) ) ) is already in cache
INFO:tulip.spec.form:after translation to python: ['( eloc == 0 )', '( ( not ( eloc == 0 ) ) or ( ( obs2 and ( not obs6 ) ) and ( not obs4 ) ) )', '( ( not ( eloc == 1 ) ) or ( ( obs6 and ( not obs4 ) ) and ( not obs2 ) ) )', '( ( not ( eloc == 2 ) ) or ( ( obs4 and ( not obs6 ) ) and ( not obs2 ) ) )']
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': True, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 'X2', 'obsX4': False, 'home': True, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 0
DEBUG:tulip.synth:machine vertex: 0, has var values: {'loc': 3, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 0, 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 1
DEBUG:tulip.synth:machine vertex: 1, has var values: {'loc': 4, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.synth:machine vertex: 2, has var values: {'loc': 1, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 3
DEBUG:tulip.synth:machine vertex: 3, has var values: {'loc': 1, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': True, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 'X4', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 4
DEBUG:tulip.synth:machine vertex: 4, has var values: {'loc': 8, 'goal': False, 'obs6': False, 'obs4': True, 'obs2': False, 'obsX2': False, 'eloc': 2, 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.synth:machine vertex: 5, has var values: {'loc': 0, 'goal': True, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': False, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': False, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 6
DEBUG:tulip.synth:machine vertex: 6, has var values: {'loc': 0, 'goal': True, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 1, 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.synth:machine vertex: 8, has var values: {'loc': 1, 'goal': False, 'obs6': False, 'obs4': False, 'obs2': True, 'obsX2': True, 'eloc': 0, 'obsX4': False, 'home': False, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': True, 'obsX6': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 'X6', 'obsX4': False, 'home': True, 'obsX6': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs6': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obsX2': set([0, 1]), 'eloc': set(['X2', 'X6', 'X4']), 'obsX4': set([0, 1]), 'home': set([0, 1]), 'obsX6': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 11
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 11
DEBUG:tulip.synth:machine vertex: 11, has var values: {'loc': 3, 'goal': False, 'obs6': True, 'obs4': False, 'obs2': False, 'obsX2': False, 'eloc': 1, 'obsX4': False, 'home': True, 'obsX6': False}
DEBUG:tulip.synth:Mealy machine has: n = 13 states.
